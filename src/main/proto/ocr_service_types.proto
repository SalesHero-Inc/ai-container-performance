syntax = "proto3";

package ah.ocrstudio.service;

// # Common messages
message Status {
  bool success = 1;
  string message = 2;
}


// # Healthcheck
// ## Request
message HealthRequest {}

// ## Response
enum HealthStatus {
  FAIL = 0;
  PASS = 1;
  WARNING = 2;
}

message HealthResponse {
  HealthStatus health_status = 1;
  string message = 2;
}


// # configure_enignes
// ## Request
message EngineDefinition {
  string engine_name = 1;
  string engine_path = 2;
}

message EngineConfigurationRequest {
  repeated EngineDefinition engines = 1;
}

// ## Response
enum FieldType {
  BOOLEAN = 0;
  LONG = 1;
  DOUBLE = 2;
  STRING = 3;
  BINARY = 4;
}

message EngineConfigurationResponse {
  Status status = 1;
  map<string, FieldType> engine_return_types = 2;
}


// # configure_reference
// ## Request
message ReferenceConfigurationRequest {
  repeated string reference_paths = 1;
}

// ## Response
message ReferenceConfigurationResponse {
  Status status = 1;
  repeated Status file_statuses = 2;
}


// # configure_references
// ## Request
message ReferencesConfigurationRequest {
  map<string, ReferenceConfigurationRequest> reference_paths = 1;
}

// ## Response
message ReferencesConfigurationResponse {
  Status status = 1;
  map<string, ReferenceConfigurationResponse> reference_statuses = 2;
}


// # align
// ## Request
message AlignmentRequest {
  repeated string document_paths = 1;
  string output_folder = 2;
}

// ## Response
message AlignedImage {
  double score = 1;
  string image_path = 2;
}

message AlignmentResponse {
  Status status = 1;
  map<int32, AlignedImage> aligned_images = 2;
  string reference_id = 3;
}


// # extract
// ## Request
message FieldDefinition {
  int32 x = 1;
  int32 y = 2;
  int32 w = 3;
  int32 h = 4;
  string image_path = 5;
  string engine = 6;
}

message ExtractionRequest {
  map<string, FieldDefinition> fields = 1;
}

// ## Response
message EnsembledChar {
  double score = 1;
  bool is_optional = 2;
  string character = 3;
  repeated string alternatives = 4;
}

message FieldValue {
  Status status = 1;
  bytes snippet = 2;
  double score = 3;
  oneof value {
    bool boolean_value = 4;
    int64 long_value = 5;
    double double_value = 6;
    string string_value = 7;
    bytes binary_value = 8;
  }
  repeated EnsembledChar ensembled_string = 9;
}

message ExtractionResponse {
  Status status = 1;
  map<string, FieldValue> fields = 2;
}
